{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/ReactApp/react-intro/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./addTask\";\nimport EditTask from \"./editTask\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTask: [],\n      todoToShow: \"All\"\n    };\n    this.addTask = this.addTask.bind(this);\n    this.delTask = this.delTask.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.completedTask = this.completedTask.bind(this);\n  }\n\n  addTask(todo) {\n    console.log(todo, ...this.state.allTask, \"todo\");\n\n    if (todo.text !== \"\") {\n      this.setState({\n        allTask: [todo, ...this.state.allTask]\n      });\n    }\n  }\n\n  updateTask(todo) {\n    this.setState({\n      allTask: this.state.allTask.filter(item => {\n        if (item.id === todo.id) {\n          item.text = todo.text;\n          return item;\n        } else {\n          return item;\n        }\n      })\n    });\n  }\n\n  delTask(index) {\n    this.setState({\n      allTask: this.state.allTask.filter(a => a.id !== index)\n    });\n  }\n\n  completedTask(index) {\n    this.setState({\n      allTask: this.state.allTask.filter(item => {\n        if (index === item.id) {\n          item.isCompleted = !item.isCompleted;\n          return item;\n        } else {\n          return item;\n        }\n      })\n    });\n  }\n\n  updateTodoToShow(s) {\n    this.setState({\n      todoToShow: s\n    });\n  }\n\n  selectAll() {\n    let s = this.state.allTask.some(function (val) {\n      return val.isCompleted === false;\n    });\n\n    if (s === true) {\n      this.setState({\n        allTask: this.state.allTask.filter(item => {\n          item.isCompleted = true;\n          return item;\n        })\n      });\n    } else {\n      this.setState({\n        allTask: this.state.allTask.filter(item => {\n          item.isCompleted = false;\n          return item;\n        })\n      });\n    }\n  }\n\n  render() {\n    // console.log(this.props.tasks, this.state.allTask, \"props and state\")\n    let todos = [];\n\n    if (this.state.todoToShow === \"All\") {\n      todos = this.state.allTask;\n    } else if (this.state.todoToShow === \"Active\") {\n      todos = this.state.allTask.filter(task => !task.isCompleted);\n    } else if (this.state.todoToShow === \"Completed\") {\n      todos = this.state.allTask.filter(task => task.isCompleted);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Todos\"), React.createElement(\"div\", {\n      className: \"tasktab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tasktab2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"toggle\",\n      type: \"button\",\n      onClick: this.selectAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" \", \"\\u2713\", \" \"), React.createElement(AddTask, {\n      onSubmit: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), todos.map(task => React.createElement(\"div\", {\n      className: \"tasktab2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkBox\",\n      checked: task.isCompleted,\n      onClick: () => {\n        this.completedTask(task.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(EditTask, {\n      currTask: task,\n      onSubmit: this.updateTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"Destroy\",\n      type: \"button\",\n      onClick: () => {\n        this.delTask(task.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" \", \"X\", \" \"))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" \", todos.filter(task => !task.isCompleted).length, \" items left\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"All\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"All \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"Active\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Active\", \" \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"Completed\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Completed\", \" \")));\n  }\n\n} //\n// this.state = {\n//     tasks: [\n//         {id:'task1', name:'task1', isCompleted: false}\n//     ]\n// }\n// var newTask= {\n//     id: '',\n//     name: e.target.value,\n//     isCompleted: false\n// }\n// this.setState({\n//     tasks:[...this.state.tasks, newTask]\n// })\n// newState = [\n//     ...this.state.tasks.splice(0,1),\n//     newUpdated\n//     ...this.state.tasks.splice(index, lengh)\n// ]","map":{"version":3,"sources":["/Users/apple/Documents/ReactApp/react-intro/src/App.js"],"names":["React","AddTask","EditTask","App","Component","constructor","props","state","allTask","todoToShow","addTask","bind","delTask","selectAll","completedTask","todo","console","log","text","setState","updateTask","filter","item","id","index","a","isCompleted","updateTodoToShow","s","some","val","render","todos","task","map","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./addTask\";\nimport EditTask from \"./editTask\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTask: [],\n      todoToShow: \"All\"\n    };\n    this.addTask = this.addTask.bind(this);\n    this.delTask = this.delTask.bind(this);\n    this.selectAll = this.selectAll.bind(this);\n    this.completedTask = this.completedTask.bind(this);\n  }\n  addTask(todo) {\n    console.log(todo, ...this.state.allTask, \"todo\");\n    if (todo.text !== \"\") {\n      this.setState({\n        allTask: [todo, ...this.state.allTask]\n      });\n    }\n  }\n\n  updateTask(todo) {\n    this.setState({\n      allTask: this.state.allTask.filter(item => {\n        if (item.id === todo.id) {\n          item.text = todo.text;\n          return item;\n        } else {\n          return item;\n        }\n      })\n    });\n  }\n\n  delTask(index) {\n    this.setState({ allTask: this.state.allTask.filter(a => a.id !== index) });\n  }\n\n  completedTask(index) {\n    this.setState({\n      allTask: this.state.allTask.filter(item => {\n        if (index === item.id) {\n          item.isCompleted = !item.isCompleted;\n          return item;\n        } else {\n          return item;\n        }\n      })\n    });\n  }\n\n  updateTodoToShow(s) {\n    this.setState({ todoToShow: s });\n  }\n\n  selectAll() {\n    let s = this.state.allTask.some(function(val) {\n      return val.isCompleted === false;\n    });\n    if (s === true) {\n      this.setState({\n        allTask: this.state.allTask.filter(item => {\n          item.isCompleted = true;\n          return item;\n        })\n      });\n    } else {\n      this.setState({\n        allTask: this.state.allTask.filter(item => {\n          item.isCompleted = false;\n          return item;\n        })\n      });\n    }\n  }\n\n  render() {\n    // console.log(this.props.tasks, this.state.allTask, \"props and state\")\n    let todos = [];\n    if (this.state.todoToShow === \"All\") {\n      todos = this.state.allTask;\n    } else if (this.state.todoToShow === \"Active\") {\n      todos = this.state.allTask.filter(task => !task.isCompleted);\n    } else if (this.state.todoToShow === \"Completed\") {\n      todos = this.state.allTask.filter(task => task.isCompleted);\n    }\n\n    return (\n      <div>\n        <h1 className=\"heading\">Todos</h1>\n        <div className=\"tasktab\">\n          <div className=\"tasktab2\">\n            <button className=\"toggle\" type=\"button\" onClick={this.selectAll}>\n              {\" \"}\n              ✓{\" \"}\n            </button>\n            <AddTask onSubmit={this.addTask} />\n          </div>\n          {todos.map(task => (\n            <div className=\"tasktab2\">\n              <input\n                type=\"checkBox\"\n                checked={task.isCompleted}\n                onClick={() => {\n                  this.completedTask(task.id);\n                }}\n              />\n\n              <EditTask currTask={task} onSubmit={this.updateTask} />\n              <button\n                className=\"Destroy\"\n                type=\"button\"\n                onClick={() => {\n                  this.delTask(task.id);\n                }}\n              >\n                {\" \"}\n                X{\" \"}\n              </button>\n            </div>\n          ))}\n          <label>\n            {\" \"}\n            {todos.filter(task => !task.isCompleted).length} items left{\" \"}\n          </label>\n          <button onClick={() => this.updateTodoToShow(\"All\")}>All </button>\n          <button onClick={() => this.updateTodoToShow(\"Active\")}>\n            Active{\" \"}\n          </button>\n          <button onClick={() => this.updateTodoToShow(\"Completed\")}>\n            Completed{\" \"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n//\n// this.state = {\n//     tasks: [\n//         {id:'task1', name:'task1', isCompleted: false}\n//     ]\n// }\n\n// var newTask= {\n//     id: '',\n//     name: e.target.value,\n//     isCompleted: false\n// }\n\n// this.setState({\n//     tasks:[...this.state.tasks, newTask]\n// })\n\n// newState = [\n//     ...this.state.tasks.splice(0,1),\n//     newUpdated\n//     ...this.state.tasks.splice(index, lengh)\n// ]\n"]},"metadata":{},"sourceType":"module"}