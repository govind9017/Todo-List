{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/ReactApp/react-intro/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport AddTask from './addTask';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allTask: [],\n      todoToShow: \"All\"\n    };\n    this.addTask = this.addTask.bind(this);\n    this.delTask = this.delTask.bind(this);\n    this.completedTask = this.completedTask.bind(this);\n  }\n\n  addTask(todo) {\n    this.setState({\n      allTask: [todo, ...this.state.allTask]\n    });\n  }\n\n  delTask(index) {\n    this.setState({\n      allTask: this.state.allTask.filter(a => a.id !== index)\n    });\n  }\n\n  completedTask(index) {\n    this.setState({\n      allTask: this.state.allTask.filter(item => {\n        if (index === item.id) {\n          item.isCompleted = !item.isCompleted;\n          return item;\n        } else {\n          return item;\n        }\n      })\n    });\n  }\n\n  updateTodoToShow(s) {\n    this.setState({\n      todoToShow: s\n    });\n  }\n\n  render() {\n    // console.log(this.props.tasks, this.state.allTask, \"props and state\")\n    let todos = [];\n\n    if (this.state.todoToShow === \"All\") {\n      todos = this.state.allTask;\n    } else if (this.state.todoToShow === \"Active\") {\n      todos = this.state.allTask.filter(task => !task.isCompleted);\n    } else if (this.state.todoToShow === \"Completed\") {\n      todos = this.state.allTask.filter(task => task.isCompleted);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(AddTask, {\n      onSubmit: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tasktab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, todos.map(task => React.createElement(\"ls\", {\n      className: \"tasktab\",\n      keys: task.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkBox\",\n      checked: task.isCompleted,\n      onClick: () => {\n        this.completedTask(task.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: task.isCompleted ? \"Completed\" : \"Pending\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \" \", task.text, \" \"), React.createElement(\"button\", {\n      class: \"Destroy\",\n      type: \"button\",\n      onClick: () => {\n        this.delTask(task.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" X \")))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"  \", todos.filter(task => !task.isCompleted).length, \" items left \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"All\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"All \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"Active\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Active \"), React.createElement(\"button\", {\n      onClick: () => this.updateTodoToShow(\"Completed\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Completed \")));\n  }\n\n} // \n// this.state = {\n//     tasks: [\n//         {id:'task1', name:'task1', isCompleted: false}\n//     ]\n// }\n// var newTask= {\n//     id: '',\n//     name: e.target.value,\n//     isCompleted: false\n// }\n// this.setState({\n//     tasks:[...this.state.tasks, newTask]\n// })\n// newState = [\n//     ...this.state.tasks.splice(0,1),\n//     newUpdated\n//     ...this.state.tasks.splice(index, lengh)\n// ]","map":{"version":3,"sources":["/Users/apple/Documents/ReactApp/react-intro/src/App.js"],"names":["React","AddTask","App","Component","constructor","props","state","allTask","todoToShow","addTask","bind","delTask","completedTask","todo","setState","index","filter","a","id","item","isCompleted","updateTodoToShow","s","render","todos","task","map","text","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\nimport AddTask from './addTask'\n\nexport default class App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            allTask: [],\n            todoToShow: \"All\"\n        };\n        this.addTask= this.addTask.bind(this);\n        this.delTask= this.delTask.bind(this);\n        this.completedTask = this.completedTask.bind(this);\n    }\n    addTask(todo){\n        this.setState({allTask: [todo, ...this.state.allTask]});\n    }\n\n\n    delTask(index){\n        this.setState({allTask: this.state.allTask.filter(a => a.id !==index)});\n    }\n\n    completedTask(index){\n        this.setState({\n            allTask: this.state.allTask.filter(item=>{\n                if(index === item.id){\n                    item.isCompleted = !item.isCompleted;\n                    return item;\n                }\n                else{\n                    return item;\n                }\n            })\n        })\n    }\n\n    updateTodoToShow(s){\n        this.setState({todoToShow: s})\n    }\n\n\n    render(){\n        // console.log(this.props.tasks, this.state.allTask, \"props and state\")\n        let todos =[];\n        if (this.state.todoToShow===\"All\") {\n            todos = this.state.allTask;\n        } else if(this.state.todoToShow===\"Active\") {\n            todos = this.state.allTask.filter(task=> !task.isCompleted);\n        } else if(this.state.todoToShow===\"Completed\") {\n            todos = this.state.allTask.filter(task=> task.isCompleted);\n        }\n\n        return(\n            <div>\n            <AddTask onSubmit={this.addTask} />\n            <div className= \"tasktab\">\n            <div>\n               {todos.map((task) =>\n                <ls className= \"tasktab\" keys = {task.id}>\n            \n                <input type = \"checkBox\" checked = {task.isCompleted} onClick = {()=> {\n                    this.completedTask(task.id);\n                }} />\n                <label className={(task.isCompleted)? \"Completed\": \"Pending\"}> {task.text} </label>\n                <button class =\"Destroy\" type=\"button\" onClick = {()=>{ this.delTask(task.id);}}> X </button>\n                </ls>\n                )\n            }</div>\n            <label>  {todos.filter(task=> !task.isCompleted).length} items left </label>\n            <button onClick={()=> this.updateTodoToShow(\"All\")}>All </button>\n            <button onClick={()=>this.updateTodoToShow(\"Active\")}>Active </button>\n            <button onClick={()=> this.updateTodoToShow(\"Completed\")}>Completed </button>\n            </div>\n            </div>\n        );\n    };\n}\n\n// \n// this.state = {\n//     tasks: [\n//         {id:'task1', name:'task1', isCompleted: false}\n//     ]\n// }\n\n// var newTask= {\n//     id: '',\n//     name: e.target.value,\n//     isCompleted: false\n// }\n\n// this.setState({\n//     tasks:[...this.state.tasks, newTask]\n// })\n\n\n// newState = [\n//     ...this.state.tasks.splice(0,1),\n//     newUpdated\n//     ...this.state.tasks.splice(index, lengh)\n// ]"]},"metadata":{},"sourceType":"module"}